from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dotenv import load_dotenv
import pdfplumber

from app.parser import parse_transactions
from app.ai_analysis import analyze_transactions_with_gpt
from app.utils.excel_exporter import save_transactions_to_excel

load_dotenv()

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import F
import os
import logging

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

from aiogram.client.default import DefaultBotProperties

bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

user_sessions = {}

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF-–≤—ã–ø–∏—Å–æ–∫ üòä")

@dp.message(lambda message: message.document and message.document.mime_type == 'application/pdf')
async def handle_pdf(message: Message):
    file = await bot.download(message.document.file_id)
    file_path = f"temp/{message.document.file_name}"

    with open(file_path, "wb") as f:
        f.write(file.read())

    with pdfplumber.open(file_path) as pdf:
        text = ""
        for page in pdf.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + "\n"

    with open("temp/raw_text.txt", "w", encoding="utf-8") as debug_file:
        debug_file.write(text)

    if not text:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF üòî")
        return

    pdf_path = file_path
    transactions = parse_transactions(text=text, pdf_path=pdf_path)

    if not transactions:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ PDF üòî")
        return

    user_id = message.from_user.id
    user_sessions.setdefault(user_id, []).extend(transactions)

    await message.answer(
        f"‚úÖ –§–∞–π–ª {message.document.file_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é.\n"
        f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–µ—Å—Å–∏–∏: {len(user_sessions[user_id])}"
    )

    # –ö–Ω–æ–ø–∫–∏: –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏ –æ—á–∏—Å—Ç–∏—Ç—å
    buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—ã–ø–∏—Å–∫–∏", callback_data="merge_done")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="clear_session")]
        ]
    )
    await message.answer("–ï—Å–ª–∏ –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –≤—Å–µ –≤—ã–ø–∏—Å–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=buttons)

import os
from datetime import datetime

async def send_merged_excel(user_id: int, target):
    transactions = user_sessions.get(user_id)
    if not transactions:
        await target.answer("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    await target.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å
    filename = f"merged_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    excel_path = os.path.join("temp", filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel-—Ñ–∞–π–ª
    save_transactions_to_excel(transactions, output_path=excel_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    excel_file = FSInputFile(excel_path)
    await target.answer_document(excel_file, caption="üìä –í–æ—Ç –≤–∞—à–∞ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –≤—ã–ø–∏—Å–∫–∞")

    await target.answer("–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é üòä")

@dp.callback_query(lambda c: c.data == "merge_done")
async def handle_merge_callback(callback: CallbackQuery):
    await send_merged_excel(callback.from_user.id, callback.message)

@dp.message(lambda message: message.text.lower() in ["/done_merge"])
async def handle_done_merge(message: Message):
    await send_merged_excel(message.from_user.id, message)

@dp.callback_query(lambda c: c.data == "clear_session")
async def handle_clear_session(callback: CallbackQuery):
    user_sessions[callback.from_user.id] = []
    await callback.message.answer("üóë –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –≤—ã–ø–∏—Å–∫–∏.")

@dp.message(lambda message: message.text.lower() in ["–¥–∞", "–∞–Ω–∞–ª–∏–∑", "go"])
async def handle_analysis(message: Message):
    user_id = message.from_user.id
    transactions = user_sessions.get(user_id)

    if not transactions:
        await message.answer("–°–µ—Å—Å–∏—è –ø—É—Å—Ç–∞. –ù–µ—á–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å üòî")
        return

    await message.answer("üìä –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ GPT...")
    try:
        result = await analyze_transactions_with_gpt(transactions)
        await message.answer(result)
    except Exception as e:
        logging.exception("GPT analysis failed")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å GPT üò¢")

    user_sessions[user_id] = []  # –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏

@dp.message(lambda message: message.text.lower() in ["–Ω–µ—Ç", "no"])
async def handle_cancel_analysis(message: Message):
    await message.answer("–û–∫! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ `–¥–∞`, –∏ —è –ø—Ä–æ–≤–µ–¥—É –∞–Ω–∞–ª–∏–∑ ‚ú®")

@dp.message()
async def echo_message(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ PDF-–≤—ã–ø–∏—Å–∫—É, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–µ")

async def start_bot():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)